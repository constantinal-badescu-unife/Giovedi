Opzioni del comando ls...
ls [–opzioni...] [file...]

Alcune opzioni
❑ l (long format): per ogni file una linea che contiene diritti,
numero di link, proprietario del file, gruppo del proprietario,
occupazione di disco (blocchi), data e ora dell’ultima modifica
o dell’ultimo accesso e nome
❑ t (time): la lista è ordinata per data dell’ultima modifica
❑ u la lista è ordinata per data dell’ultimo accesso
❑ r (reverse order): inverte l’ordine
❑ a (all files): fornisce una lista completa (normalmente i file il cui
nome comincia con il punto non vengono visualizzati)
❑ F (classify): indica anche il tipo di file (eseguibile: *, directory: /,
link simbolico: @, FIFO: |, socket: =, niente per file regolari)


Link

Le informazioni contenute in uno stesso file possono essere
visibili come file diversi, tramite “riferimenti” (link) allo
stesso file fisico

• SO considera e gestisce la molteplicità possibile di
riferimenti:
❑ se un file viene cancellato, le informazioni sono veramente
eliminate solo se non ci sono altri link a esso
❑ Il link cambia i diritti? ➔ meglio di no

Due tipi di link:

• link fisici (si collegano le strutture del filesystem)
• link simbolici (si collegano solo i nomi)


Soft Link vs. Hard link

• Link fisici (hard link): l'hard link ha lo stesso inode del
file originario
• Link simbolici (soft link o symlink): si collegano solo i
nomi di file, soft-link e file originario hanno inode distinti


Comando ln, link

• Le informazioni contenute in uno stesso file possono
essere visibili come file diversi, tramite “riferimenti” (link)
allo stesso file fisico.
• SO considera e tratta il tutto: se un file viene cancellato,
le informazioni sono veramente eliminate solo se non ci
sono altri link a esso

comando: ln [-s]
• ln /nome2/nome6/filetemp /nome1/temp


Comandi vari di gestione

• Creazione/gestione di directory
❑ mkdir <nomedir> creazione di un nuovo direttorio
❑ rmdir <nomedir> cancellazione di un direttorio
❑ cd <nomedir> cambio di direttorio
❑ pwd stampa il direttorio corrente
❑ ls [<nomedir>] visualizz. contenuto del direttorio

• Trattamento file
❑ ln <vecchionome> <nuovonome> link
❑ cp <filesorgente> <filedestinazione> copia
❑ mv <vecchionome> <nuovonome> rinom. / spost.
❑ rm <nomefile> cancellazione
❑ cat <nomefile> visualizzazione


cat

Il comando cat stampa a video il contenuto di un file:

cgiannelli@linuxdid:~$ cat /etc/passwd
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
...

/etc/passwd is a text file that contains the attributes of (i.e., basic information
about) each user or account on a computer running Linux or another Unix-like
operating system



more (e less)

• Il comando cat effettua una semplicissima stampa del
contenuto a video di un file. Per una visualizzazione a
pagine, certamente più comoda per file di larghe
dimensioni, è necessario utilizzare un comando di
paginazione.

• Il comando more permette di visualizzare un file una
pagina per volta.

• Esistono diverse alternative più recenti e potenti al
comando more, tra cui va sicuramente segnalato il
comando less (che permette anche di far scorrere la
visualizzazione all’indietro).


echo

• Il comando echo stampa a video la stringa passatagli
come parametro:

cgiannelli@linuxdid:~$ echo Hello world!
Hello world!

• Il comando echo rappresenta la primitiva fondamentale
che la shell mette a disposizione per stampare
informazioni a video.


sort

• Il comando sort riordina le righe di un file in ordine alfabetico

• Esempi e opzioni:
sort nomefile.txt # elenca le righe del file nomefile.txt

# in ordine alfabetico crescente

sort –r nomefile.txt# elenca le righe del file nomefile.txt

# in ordine alfabetico decrescente

• Il comando sort ha molte opzioni:
❑ -o <nomefileout> stampa su file
❑ -n interpreta le righe del file come numeri
❑ -k <n> ordina il file secondo il contenuto della n-esima
colonna


diff

• Il comando diff stampa la differenza tra il contenuto di due file

• Esempio:
diff <file1> <file2> # mostra (solo) le righe diverse

• Il comando diff è molto utilizzato nella gestione del codice
sorgente


wc

• Il comando wc stampa il numero di righe, parole, o
caratteri contenuti in un file

• Esempi e opzioni:
wc -l nomefile.txt # conta le linee (opzione l)
# contenute nel file nomefile.txt
wc -w nomefile.txt # conta le parole (opzione w)
# contenute nel file nomefile.txt
wc -c nomefile.txt # conta i caratteri (opzione c)
# contenuti nel file nomefile.txt


grep

• Il comando grep seleziona le righe di un file che
contengono la stringa passata come parametro e le
stampa a video

• Esempi:
grep stringa nomefile.txt # seleziona le righe del file
# nomefile.txt che contengono il testo “stringa”
# e le stampa a video

grep –c stringa nomefile.txt # conta le righe del file
# nomefile.txt che contengono il testo “stringa”
# e stampa il numero a video


grep

grep –r stringa dir # seleziona le righe di tutti i file

# nella directory dir che contengono il
# testo “stringa” e le stampa a video,
# ricorsivo sulle sotto directory

• Il comando grep ha numerosissime opzioni ed è
utilizzatissimo, specialmente nella gestione e
manipolazione di file di configurazione e di codice
sorgente


head

• Il comando head mostra le prime righe di un file

• Esempi e opzioni:
head –n 15 nomefile.txt # mostra le prime 15 righe del file
head –c 30 nomefile.txt # mostra i primi 30 caratteri del file


tail

• Il comando tail mostra le ultime righe di un file

• Esempi e opzioni:
tail –n 15 nomefile.txt # mostra le ultime 15 righe del file
tail –c 30 nomefile.txt # mostra gli ultimi 30 caratteri del file

time

• Il comando time cronometra il tempo di esecuzione di un
comando

• Esempi:
• cgiannelli@linuxdid:~$ time ls foto.jpeg
foto.jpeg
ls foto.jpeg 0,00s user 0,00s system 0% cpu 0,002 total


who

• Il comando who mostra gli utenti attualmente collegati al
sistema (ovverosia che hanno eseguito il login sulla
macchina)

• Esempio:
cgiannelli@linuxdid:~$ who
cgiannelli :0 2013-12-15 11:01
cgiannelli pts/0 2013-12-15 11:02 (:0)
cgiannelli pts/1 2013-12-15 12:14 (:0)
cgiannelli pts/3 2013-12-16 18:19 (:0)



man

• In ambiente Unix, il comando man rappresenta l’help di
sistema

• Esempio:
man grep # mostra l’help (guida) del comando grep

• Oltre al comando man, le moderne distribuzioni di Linux
mettono a disposizione anche il comando info



ps

Un processo utente in genere viene attivato a partire da un comando
(da cui prende il nome). Ad es., dopo aver mandato in esecuzione
il comando hw, verrà visualizzato un processo dal nome hw.
Tramite ps si può vedere la lista dei processi attivi
cgiannelli@info1-linux:~$ ps
PID TTY STAT TIME COMMAND
4837 p2 S 0:00 -bash
6945 p2 S 0:00 sleep 5s
6948 p2 R 0:00 ps

Comando ps molto utile quando si lancia l’esecuzione di
programmi di sistema con errori di programmazione
(guardare su man le varie opzioni ps)

ps

cgiannelli@linuxdid:~$ ps au
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root        2522  2.6  1.1 26102712 181788 tty7  Ssl+ 08:38   1:29 /usr/lib/xorg
root        2528  0.0  0.0   3116  1760 tty1     Ss+  08:38   0:00 /sbin/agetty 
alex        9292  0.0  0.0   8888  5280 pts/0    Ss   08:55   0:00 bash
alex       17859  0.0  0.0  11220  4640 pts/0    R+   09:34   0:00 ps au
cgiannelli@linuxdid:~$

Cosa è il PID?
Il PID (Process ID) è un identificatore univoco 
assegnato dal sistema operativo a ogni processo 
in esecuzione. 
Serve a distinguere e gestire i vari processi 
attivi nel sistema. Ad esempio, nel comando 
ps, il PID è mostrato nella colonna "PID" e 
permette di identificare specificamente 
ogni processo.

Esempio:
```plaintext
PID TTY      STAT   TIME COMMAND
4837 p2       S      0:00 -bash
6945 p2       S      0:00 sleep 5s
6948 p2       R      0:00 ps
```
In questo caso, i processi hanno i 
PID 4837, 6945 e 6948 rispettivamente.



ps

Alcune opzioni importanti:
• a Mostra anche i processi degli altri utenti
• u Fornisce nome dell’utente che ha lanciato il processo e
l’ora in cui il processo è stato lanciato
• x Mostra anche i processi senza terminale di controllo
(processi demoni)

Attenzione: si ricordi di non usare il trattino (-) per specificare le
opzioni del comando ps, in quanto ps adotta la sintassi di
tipo “extended BSD” che non prevede l’uso di trattini.

Se si vuole un aggiornamento periodico dello stato dei processi
correnti, si usi il comando top.



top

• Il comando top fornisce una visione dinamica in real-time
del sistema corrente. Esso visualizza continuamente
informazioni sull’utilizzo del sistema (memoria fisica e
virtuale, CPU, ecc.) e sui processi che usano la maggiore
share di CPU.

• Esiste anche una versione più avanzata e moderna di
top, chiamata htop. Al contrario di top, di solito htop non
è incluso tra le utility di base disponibili sulle macchine
Linux e va esplicitamente installato.



pgrep e pkill

Il comando pgrep restituisce i pid (process id) dei processi che
corrispondono alle caratteristiche richieste (nome processo, utente, ...).
Ad esempio, per ottenere il pid del processo Skype:
cgiannelli@linuxdid:~$ pgrep skype
9280

Per ottenere il pid del processo demone sshd appartenente all’utente root:
cgiannelli@linuxdid:~$ pgrep -u root sshd
3488

pkill presenta la stessa interfaccia comandi di pgrep, ma anziché stampare
a video il pid dei processi, li uccide (in realtà invia loro un segnale
SIGTERM).



Terminazione forzata di un processo

È possibile ‘terminare forzatamente’ un processo tramite
il comando kill

Ad esempio:
• kill –9 <PID> provoca l’invio di un segnale
SIGKILL (forza la terminazione del processo che lo
riceve e non può essere ignorato) al processo
identificato da PID
❑ Esempio: kill –9 6944

Per conoscere il PID di un determinato processo, si può
utilizzare il comando ps oppure il commando pgrep



Segnali e interruzioni

È possibile interrompere un processo (purché se ne
abbiano i diritti...) kill –s <PID>
provoca l’invio di un segnale (individuato dal parametro s)
al processo identificato dal PID - vedremo ampiamente il
concetto di segnale più avanti nel corso...
kill –9 è solo un esempio: 9 corrisponde a SIGKILL,
che provoca la terminazione incondizionata del
processo (segnale non mascherabile) e dei figli
(ricorsivamente)
Alcuni tra i segnali più comuni:

CTRL-C (invia un SIGINT, terminazione del processo attualmente in
foreground, kill –2)
CTRL-Z (invia un SIGTSTP, sospensione di un processo, kill -20)

kill –l fornisce la lista dei segnali


Utenti e gruppi

• Sistema multiutente  problemi di privacy e di
possibili interferenze: necessità di
proteggere/nascondere informazione
• Concetto di gruppo (es. staff, utenti, studenti, ...):
possibilità di lavorare sugli stessi documenti
• Ogni utente appartiene a un gruppo ma può far
parte anche di altri a seconda delle esigenze e
configurazioni
• Comandi relativi all’identità dell’utente
❑ whoami
❑ id



Informazioni legate ai file

host133-63:~ carlo$ ls -l
total 8(tot. spazio occupato (blocchi))
drwx------ 3 paolo prof 102 May 18 22:49 Desktop
drwx------ 3 paolo prof 102 May 18 22:49 Documents
-rw-r--r-- 1 pippo stud 29 May 19 00:10 f1.txt
-(tipo di file)
rw-r--r--(permessi)
 1(numero di (hard) link) 
 carlo(proprietario)
  prof(gruppo)
   0(dimensione (byte))
    May 18 22:53(data ultima modifica)
     f2(nome file)



Protezione dei file

• Molti utenti
❑ Necessità di regolare gli accessi alle informazioni
• Per un file, esistono 3 tipi di utilizzatori:
❑ proprietario, user
❑ gruppo del proprietario, group
❑ tutti gli altri utenti, others
• Per ogni tipo di utilizzatore, si distinguono tre modi di accesso
al file:
❑ lettura (r)
❑ scrittura (w)
❑ esecuzione (x) (per una directory significa list del
contenuto)

• Ogni file è marcato con
❑ User-ID e Group-ID del proprietario
❑ 12 bit di protezione



Bit di protezione

12    11   10    9 8 7      6 5 4       3 2 1
0     0    0     1 1 1      1 0 0       1 0 0
SUID SGID Sticky R W X      R W X       R W X
                  User      Group       Others

                            PERMESSI

Sticky bit:
• per file eseguibili: il sistema cerca di mantenere in memoria
l’immagine del programma, anche se non è in esecuzione
• per directory: solo l'amministratore, il proprietario dei file (o
della directory possono rinominare o cancellare i file (altri
utenti non possono, anche in caso di permessi che lo
consentirebbero)



SUID e SGID

• SUID (Set User ID) (identificatore di utente effettivo
❑ Si applica a un file di programma eseguibile solamente
❑ Se vale 1, fa sì che l'utente che sta eseguendo quel
programma venga considerato il proprietario di quel file
(solo per la durata della esecuzione)

• È necessario per consentire operazioni di lettura/scrittura su file
di sistema, che l'utente non avrebbe il diritto di leggere/
modificare.
❑ Esempio: mkdir crea un direttorio, ma per farlo deve anche
modificare alcune aree di sistema (file di proprietà di root),
che non potrebbero essere modificate da un utente. Solo SUID
lo rende possibile

• SGID bit: come SUID bit, ma per il gruppo



Protezione e diritti su file

Per variare i bit di protezione:
❑ chmod [u g o] [+ -] [rwx] <nomefile>

I permessi possono essere concessi o negati dal solo
proprietario del file
Esempi di variazione dei bit di protezione:
❑ chmod 0755 /usr/dir/file

0       0       0       1 1 1   1 0 1   1 0 1
SUID    SGID    Sticky  R W X   R W X   R W X
                        User    Group   Others
chmod u-w fileimportante
Altri comandi:
❑ chown <nomeutente> <nomefile>
❑ chgrp <nomegruppo> <nomefile>


Comandi, piping e ridirezione

Comandi e input/output

I comandi UNIX si comportano come FILTRI
❑ filtro è un programma che riceve il suo ingresso da
standard input e produce il risultato su standard
output (trasformazione di dati)




Comandi shell Linux: filtri

Alcuni esempi:
❑ grep <testo> [<file>...]
Ricerca di testo. Input: (lista di) file. Output: video
❑ tee <file>
Scrive l’input sia su file, sia sul canale di output
❑ sort [<file>...]
Ordina alfabeticamente le linee. Input: (lista di) file.
Output: video
❑ rev <file>
Inverte l’ordine delle linee di file. Output: video
❑ cut [-options] <file>
Seleziona colonne da file. Output: video



Ridirezione di input e output

Possibile ridirigere input e/o output di un comando facendo
sì che non si legga da stdin (e/o non si scriva su stdout)
ma da file
❑ senza cambiare il comando
❑ completa omogeneità tra dispositivi e file
• Ridirezione dell’input
❑ comando < file_input(Aperto in lettura)
• Ridirezione dell’output
❑ comando > file_output(Aperto in scrittura
                       (nuovo o sovrascritto))
❑ comando >> file_output(Scrittura in
append)



Esempi

• ls -l > file
File conterrà il risultato di ls –l

• sort < file > file2
Ordina il contenuto di file scrivendo il risultato su
file2

• Cosa succede con > file ?

Piping

L’output di un comando può esser ridiretto a diventare l’input di
un altro comando (piping)
❑ In DOS: realizzazione con file temporanei (primo comando
scrive sul file temporaneo, secondo legge da questo)
❑ In UNIX: pipe come costrutto parallelo (l’output del primo
comando viene reso disponibile al secondo e consumato
appena possibile, non ci sono file temporanei)

• Si realizza con il carattere speciale ‘|’


Esempi di piping

• who | wc -l
❑ Conta gli utenti collegati
• ls -l | grep ^d | rev | cut -d' ' -f1 | rev
❑ Che cosa fa? Semplicemente mostra i nomi dei sottodirettori della
directory corrente
• ls -l lista i file del direttorio corrente
• grep filtra le righe che cominciano con la lettera d (pattern ^d,
vedere il man)
ovvero le directory (il primo carattere rappresenta il tipo di file)
• rev rovescia l’output di grep
• cut taglia la prima colonna dell’output passato da rev,
considerando lo spazio come delimitatore (vedi man)
– quindi, poiché rev ha rovesciato righe prodotte da ls -l,
estrae il nome dei direttori ‘al contrario’

• rev raddrizza i nomi dei direttori

Suggerimento: aggiungere i comandi uno alla volta (per vedere cosa
viene prodotto in output da ogni pezzo della pipe)


Esecuzione di comandi in Shell

• In UNIX alcuni comandi sono eseguiti direttamente dalla
shell corrente (comandi built-in)
• Invece molti comandi sono eseguiti da una nuova shell
creata al momento

• La shell attiva mette in esecuzione una seconda shell che:
❑ esegue le sostituzioni dei metacaratteri e dei parametri
(parsing)
❑ cerca il comando
❑ esegue il comando

• La shell padre attende il completamento dell'esecuzione
della sotto-shell (comportamento sincrono)


Esecuzione di un comando

Il comando esegue avendo collegato
• il proprio input al file di input
• il proprio output al file di output
specificati dalla shell di lancio




Schema di un processore di comandi

procedure shell (ambiente, filecomandi);
< eredita ambiente (esportato) del padre, via copia>
begin

repeat

<leggi comando da filecomandi>
if < è comando built-in> then

<modifica direttamente ambiente>;

else if <è comandoeseguibile> then

<esecuzione del comando via nuova shell>

else if <è nuovofilecomandi> then

shell (ambiente, nuovofilecomandi);

else < errore>;
endif
until <fine file>

end shell;
Per abortire il comando corrente: CTRL-C

Non creare un file
comandi ricorsivo
senza una condizione
di terminazione !!